# Generated by Django 4.2.19 on 2025-04-16 16:08

import app_studio.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Телефон')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cart', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Корзина пользователя',
                'verbose_name_plural': 'Корзины пользователей',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='Executor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specialization', models.CharField(blank=True, max_length=100, verbose_name='Специализация')),
                ('experience_years', models.PositiveIntegerField(default=0, verbose_name='Опыт (лет)')),
                ('portfolio_link', models.URLField(blank=True, null=True, verbose_name='Ссылка на внешнее портфолио')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания профиля')),
            ],
            options={
                'verbose_name': 'Исполнитель',
                'verbose_name_plural': 'Исполнители',
                'ordering': ['user__username'],
            },
        ),
        migrations.CreateModel(
            name='OrderStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status_name', models.CharField(choices=[('new', 'Новый'), ('processing', 'В обработке'), ('completed', 'Выполнен'), ('cancelled', 'Отменён')], max_length=50, unique=True, verbose_name='Системное имя статуса')),
            ],
            options={
                'verbose_name': 'Статус заказа',
                'verbose_name_plural': 'Статусы заказов',
                'ordering': ['pk'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название услуги')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Базовая цена')),
                ('duration_hours', models.IntegerField(verbose_name='Примерная длительность (часов)')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='services/photos/', verbose_name='Фото услуги')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания услуги')),
            ],
            options={
                'verbose_name': 'Услуга',
                'verbose_name_plural': 'Услуги',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Portfolio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='Работа в портфолио', max_length=150, verbose_name='Название работы')),
                ('video_link', models.URLField(verbose_name='Ссылка на видео/проект')),
                ('description', models.TextField(blank=True, verbose_name='Описание работы')),
                ('uploaded_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата добавления')),
                ('executor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='portfolios', to='app_studio.executor', verbose_name='Исполнитель')),
            ],
            options={
                'verbose_name': 'Работа в портфолио',
                'verbose_name_plural': 'Портфолио',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания заказа')),
                ('scheduled_at', models.DateTimeField(default=app_studio.models.default_scheduled_at, verbose_name='Запланированное время выполнения')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата фактического завершения заказа')),
                ('client', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders_as_client', to=settings.AUTH_USER_MODEL, verbose_name='Клиент')),
                ('executor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders_as_executor', to='app_studio.executor', verbose_name='Исполнитель')),
                ('service', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to='app_studio.service', verbose_name='Услуга')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='orders', to='app_studio.orderstatus', verbose_name='Статус заказа')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Заказы',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Заголовок')),
                ('content', models.TextField(verbose_name='Содержимое')),
                ('published_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата публикации')),
                ('pdf_file', models.FileField(blank=True, null=True, upload_to='news/pdfs/', verbose_name='Прикрепленный PDF файл')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='news_authored', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
            ],
            options={
                'verbose_name': 'Новость',
                'verbose_name_plural': 'Новости',
                'ordering': ['-published_at'],
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='Текст сообщения')),
                ('sent_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата отправки')),
                ('is_read', models.BooleanField(db_index=True, default=False, verbose_name='Прочитано')),
                ('receiver', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='received_messages', to=settings.AUTH_USER_MODEL, verbose_name='Получатель')),
                ('sender', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_messages', to=settings.AUTH_USER_MODEL, verbose_name='Отправитель')),
            ],
            options={
                'verbose_name': 'Сообщение',
                'verbose_name_plural': 'Сообщения',
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='ExecutorService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('custom_price', models.DecimalField(blank=True, decimal_places=2, help_text='Укажите, если цена для этого исполнителя отличается от базовой цены услуги.', max_digits=10, null=True, verbose_name='Индивидуальная цена')),
                ('executor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_studio.executor', verbose_name='Исполнитель')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_studio.service', verbose_name='Услуга')),
            ],
            options={
                'verbose_name': 'Услуга исполнителя',
                'verbose_name_plural': 'Услуги исполнителей',
                'ordering': ['executor__user__username', 'service__name'],
                'unique_together': {('executor', 'service')},
            },
        ),
        migrations.AddField(
            model_name='executor',
            name='services',
            field=models.ManyToManyField(blank=True, related_name='executors', through='app_studio.ExecutorService', to='app_studio.service', verbose_name='Предоставляемые услуги'),
        ),
        migrations.AddField(
            model_name='executor',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='executor_profile', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь'),
        ),
        migrations.CreateModel(
            name='CostCalculator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Базовая цена (из услуги)')),
                ('additional_cost', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Дополнительная стоимость (опции)')),
                ('total_cost', models.DecimalField(decimal_places=2, help_text='Рассчитывается автоматически при сохранении.', max_digits=10, verbose_name='Итоговая стоимость')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления расчёта')),
                ('service', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cost_calculator', to='app_studio.service', verbose_name='Услуга')),
            ],
            options={
                'verbose_name': 'Калькулятор стоимости',
                'verbose_name_plural': 'Калькуляторы стоимости',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], verbose_name='Оценка')),
                ('comment', models.TextField(blank=True, verbose_name='Текст комментария')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания отзыва')),
                ('executor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_received', to='app_studio.executor', verbose_name='Исполнитель (объект отзыва)')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviews', to='app_studio.order', verbose_name='Связанный заказ (опционально)')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_given', to=settings.AUTH_USER_MODEL, verbose_name='Автор отзыва')),
            ],
            options={
                'verbose_name': 'Отзыв',
                'verbose_name_plural': 'Отзывы',
                'ordering': ['-created_at'],
                'unique_together': {('user', 'order')},
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='Количество')),
                ('added_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления')),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='app_studio.cart', verbose_name='Корзина')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to='app_studio.service', verbose_name='Услуга')),
            ],
            options={
                'verbose_name': 'Элемент корзины',
                'verbose_name_plural': 'Элементы корзины',
                'ordering': ['-added_at'],
                'unique_together': {('cart', 'service')},
            },
        ),
    ]
